pollstations[2045,3] <- 52
pollstations[2067,3] <- 126
# Make a merger variable for easier merging in a coming loop
pollstations$merger <- paste(pollstations$CBS.gemeentecode,pollstations$Nummer.stembureau)
# Levenstein distance in percentage. The percentage of the longest word to account for the size differences in the strings
levens_percent <- function (str1, str2)
{
return(1 - (stringdist(str1, str2, method="lv")/pmax(nchar(str1), nchar(str2))))
}
# Setting up variables for loop
plaatsen <- list.files(path="data/stembureaus/",pattern="")
folderfile <- ""
folderfile_l <- ""
Rejected_imputation_count <- 0
count <- 0
# Loop to obtain list of all filepaths in data folder
for (i in plaatsen){
myFiles <- list.files(path = paste("data/stembureaus/",i,"/", sep=""),pattern="*.csv")
folderfile <- paste("data/stembureaus/",i,"/",myFiles, sep="")
for (j in folderfile){
count <- count + 1
folderfile_l[[count]] <- j
}
}
# Loop to make dataframe of all voting stations, their turnout and location
df_total = data.frame()
for (k in length(folderfile_l)){
data_verkiezing <- read.csv(folderfile_l[k], header=FALSE, sep=";")
areanumber <- readr::parse_number(data_verkiezing[4,3])
if (data_verkiezing[8,1] == "Postcode") {
data_verkiezing_test <- data_verkiezing %>% slice(c(6,7,8,9,14))
data_verkiezing_test <- as.data.frame(t(data_verkiezing_test)) %>% slice(-c(1:5))
data_verkiezing_test$V6 <- as.numeric(data_verkiezing_test$V5)/as.numeric(data_verkiezing_test$V4)
data_verkiezing_test$merger <- paste(areanumber,data_verkiezing_test$V2)
data_verkiezing_test["V3"] <- ifelse(data_verkiezing_test["V3"] == "", NA, data_verkiezing_test["V3"])
#Imputation in case postal code for polling station was left out
# not the best way but easy
for (k in 1:nrow(data_verkiezing_test)){
temporary_string <- merge(x = data_verkiezing_test[k,], y = pollstations[c("merger","Postcode")], by = "merger", all.x = TRUE)
temporary_string <- temporary_string[1,]
temporary_test1 <- temporary_string[,"V3"]
temporary_test2 <- temporary_string[,"Postcode"]
if ((is.na(temporary_test1)  == TRUE && is.na(temporary_test2) == FALSE)){
temporary_string[,"V3"] <- temporary_string[,"Postcode"]
#temporary_string[,"Postcode"] <- NULL
data_verkiezing_test[k,c(1:7)] <- temporary_string[,c(2:8,1)]
}
}
df_total <- rbind(df_total,data_verkiezing_test)
} else {
#The cases where there is no postal code in the .csv file at all
data_postcode_1 <- as.data.frame(t(data_verkiezing))
data_postcode_1[,5] <- as.numeric(data_postcode_1[3,4])
data_postcode_1 <- data_postcode_1[c(5:8,12)]
data_postcode_1 <- data_postcode_1 %>% slice(-c(1:5))
data_postcode_1$merger <- paste(data_postcode_1$V5, data_postcode_1$V7)
data_postcode_1 <- merge(x = data_postcode_1, y = pollstations[c("merger","Postcode")], by = "merger", all.x = TRUE)
# Section to merge zip codes to the polling station locations
# Some voting stations had different days of polling. Those were given new pollingstation numbers which are not in the locations dataset
# As a fix, we sort the dataset at names, and give the polling station with NA's the postal code from the station the row above, which should be the same
# all cases
# This only works when the name contains the date in number format, not when the name of the day is displayed. Therefore we remove those. Also to improve
# Levensteihn difference accuracy
data_postcode_1$V6<-gsub("maandag","1",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("dinsdag","2",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("woensdag","3",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("2022","",as.character(data_postcode_1$V6))
#Ordering so voting station above is likely to the identical in case of duplicates
data_postcode <- data_postcode_1[order(data_postcode_1$V6),]
# Missing value imputation based on levenstein distance
# Dit stuk moet nog naar beneden geplaatst worden voor de missende postcodes bij gemeentes waar postcodes vermeld waren
for (i in 1:nrow(data_postcode)) {
if (is.na(data_postcode[i,"Postcode"]) == TRUE){
# If levenstein similarity is over 50%, imputation . 50% is based on trial and error
if (levens_percent(data_postcode[i,"V6"],data_postcode[i-1,"V6"]) >= 0.5){
data_postcode[i,"Postcode"] <- data_postcode[i-1,"Postcode"]
} else{
#List of the remaining stations that were not similar enough to allow imputation
data_postcode[i,"Postcode"] = NA
print(paste("Original:",data_postcode[i-1,"V6"]))
print(paste("Rejected imputation:",data_postcode[i,"V6"]))
Rejected_imputation_count <- Rejected_imputation_count + 1
}
}
}
#change table order and column names to match earlier loop, for binding
data_postcode$v6 <- as.numeric(data_postcode[,"V12"])/as.numeric(data_postcode[,"V8"])
data_postcode <- data_postcode[, c(3, 2, 7, 5, 6, 8, 1)]
colnames(data_postcode) <- c("V1", "V2", "V3", "V4","V5", "V6","merger")
df_total <- rbind(df_total,data_postcode)
}
}
# Loop to make dataframe of all voting stations, their turnout and location
df_total = data.frame()
for (k in length(folderfile_l)){
data_verkiezing <- read.csv(folderfile_l[k], header=FALSE, sep=";")
areanumber <- readr::parse_number(data_verkiezing[4,3])
if (data_verkiezing[8,1] == "Postcode") {
data_verkiezing_test <- data_verkiezing %>% slice(c(6,7,8,9,14))
data_verkiezing_test <- as.data.frame(t(data_verkiezing_test)) %>% slice(-c(1:5))
data_verkiezing_test$V6 <- as.numeric(data_verkiezing_test$V5)/as.numeric(data_verkiezing_test$V4)
data_verkiezing_test$merger <- paste(areanumber,data_verkiezing_test$V2)
#data_verkiezing_test["V3"] <- ifelse(data_verkiezing_test["V3"] == "", NA, data_verkiezing_test["V3"])
#Imputation in case postal code for polling station was left out
# not the best way but easy
for (k in 1:nrow(data_verkiezing_test)){
temporary_string <- merge(x = data_verkiezing_test[k,], y = pollstations[c("merger","Postcode")], by = "merger", all.x = TRUE)
temporary_string <- temporary_string[1,]
temporary_test1 <- temporary_string[,"V3"]
temporary_test1 <- ifelse(temporary_test1 == "", NA, temporary_test1)
temporary_test2 <- temporary_string[,"Postcode"]
temporary_test2 <- ifelse(temporary_test2 == "", NA, temporary_test2)
if ((is.na(temporary_test1)  == TRUE && is.na(temporary_test2) == FALSE)){
temporary_string[,"V3"] <- temporary_string[,"Postcode"]
#temporary_string[,"Postcode"] <- NULL
data_verkiezing_test[k,c(1:7)] <- temporary_string[,c(2:8,1)]
}
}
df_total <- rbind(df_total,data_verkiezing_test)
} else {
#The cases where there is no postal code in the .csv file at all
data_postcode_1 <- as.data.frame(t(data_verkiezing))
data_postcode_1[,5] <- as.numeric(data_postcode_1[3,4])
data_postcode_1 <- data_postcode_1[c(5:8,12)]
data_postcode_1 <- data_postcode_1 %>% slice(-c(1:5))
data_postcode_1$merger <- paste(data_postcode_1$V5, data_postcode_1$V7)
data_postcode_1 <- merge(x = data_postcode_1, y = pollstations[c("merger","Postcode")], by = "merger", all.x = TRUE)
# Section to merge zip codes to the polling station locations
# Some voting stations had different days of polling. Those were given new pollingstation numbers which are not in the locations dataset
# As a fix, we sort the dataset at names, and give the polling station with NA's the postal code from the station the row above, which should be the same
# all cases
# This only works when the name contains the date in number format, not when the name of the day is displayed. Therefore we remove those. Also to improve
# Levensteihn difference accuracy
data_postcode_1$V6<-gsub("maandag","1",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("dinsdag","2",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("woensdag","3",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("2022","",as.character(data_postcode_1$V6))
#Ordering so voting station above is likely to the identical in case of duplicates
data_postcode <- data_postcode_1[order(data_postcode_1$V6),]
# Missing value imputation based on levenstein distance
# Dit stuk moet nog naar beneden geplaatst worden voor de missende postcodes bij gemeentes waar postcodes vermeld waren
for (i in 1:nrow(data_postcode)) {
if (is.na(data_postcode[i,"Postcode"]) == TRUE){
# If levenstein similarity is over 50%, imputation . 50% is based on trial and error
if (levens_percent(data_postcode[i,"V6"],data_postcode[i-1,"V6"]) >= 0.5){
data_postcode[i,"Postcode"] <- data_postcode[i-1,"Postcode"]
} else{
#List of the remaining stations that were not similar enough to allow imputation
data_postcode[i,"Postcode"] = NA
print(paste("Original:",data_postcode[i-1,"V6"]))
print(paste("Rejected imputation:",data_postcode[i,"V6"]))
Rejected_imputation_count <- Rejected_imputation_count + 1
}
}
}
#change table order and column names to match earlier loop, for binding
data_postcode$v6 <- as.numeric(data_postcode[,"V12"])/as.numeric(data_postcode[,"V8"])
data_postcode <- data_postcode[, c(3, 2, 7, 5, 6, 8, 1)]
colnames(data_postcode) <- c("V1", "V2", "V3", "V4","V5", "V6","merger")
df_total <- rbind(df_total,data_postcode)
}
}
# Loop to make dataframe of all voting stations, their turnout and location
df_total = data.frame()
for (k in length(folderfile_l)){
data_verkiezing <- read.csv(folderfile_l[k], header=FALSE, sep=";")
areanumber <- readr::parse_number(data_verkiezing[4,3])
if (data_verkiezing[8,1] == "Postcode") {
data_verkiezing_test <- data_verkiezing %>% slice(c(6,7,8,9,14))
data_verkiezing_test <- as.data.frame(t(data_verkiezing_test)) %>% slice(-c(1:5))
data_verkiezing_test$V6 <- as.numeric(data_verkiezing_test$V5)/as.numeric(data_verkiezing_test$V4)
data_verkiezing_test$merger <- paste(areanumber,data_verkiezing_test$V2)
#data_verkiezing_test["V3"] <- ifelse(data_verkiezing_test["V3"] == "", NA, data_verkiezing_test["V3"])
#Imputation in case postal code for polling station was left out
# not the best way but easy
for (k in 1:nrow(data_verkiezing_test)){
temporary_string <- merge(x = data_verkiezing_test[k,], y = pollstations[c("merger","Postcode")], by = "merger", all.x = TRUE)
temporary_string <- temporary_string[1,]
temporary_test1 <- temporary_string[,"V3"]
temporary_test1 <- ifelse(temporary_test1 == "", NA, temporary_test1)
temporary_test2 <- temporary_string[,"Postcode"]
temporary_test2 <- ifelse(temporary_test2 == "", NA, temporary_test2)
if ((is.na(temporary_test1)  == TRUE && is.na(temporary_test2) == FALSE)){
temporary_string[,"V3"] <- temporary_string[,"Postcode"]
#temporary_string[,"Postcode"] <- NULL
data_verkiezing_test[k,c(1:7)] <- temporary_string[,c(2:8,1)]
}
}
df_total <- rbind(df_total,data_verkiezing_test)
} else {
#The cases where there is no postal code in the .csv file at all
data_postcode_1 <- as.data.frame(t(data_verkiezing))
data_postcode_1[,5] <- as.numeric(data_postcode_1[3,4])
data_postcode_1 <- data_postcode_1[c(5:8,12)]
data_postcode_1 <- data_postcode_1 %>% slice(-c(1:5))
data_postcode_1$merger <- paste(data_postcode_1$V5, data_postcode_1$V7)
data_postcode_1 <- merge(x = data_postcode_1, y = pollstations[c("merger","Postcode")], by = "merger", all.x = TRUE)
# Section to merge zip codes to the polling station locations
# Some voting stations had different days of polling. Those were given new pollingstation numbers which are not in the locations dataset
# As a fix, we sort the dataset at names, and give the polling station with NA's the postal code from the station the row above, which should be the same
# all cases
# This only works when the name contains the date in number format, not when the name of the day is displayed. Therefore we remove those. Also to improve
# Levensteihn difference accuracy
data_postcode_1$V6<-gsub("maandag","1",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("dinsdag","2",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("woensdag","3",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("2022","",as.character(data_postcode_1$V6))
#Ordering so voting station above is likely to the identical in case of duplicates
data_postcode <- data_postcode_1[order(data_postcode_1$V6),]
# Missing value imputation based on levenstein distance
# Dit stuk moet nog naar beneden geplaatst worden voor de missende postcodes bij gemeentes waar postcodes vermeld waren
for (i in 1:nrow(data_postcode)) {
if (is.na(data_postcode[i,"Postcode"]) == TRUE){
# If levenstein similarity is over 50%, imputation . 50% is based on trial and error
if (levens_percent(data_postcode[i,"V6"],data_postcode[i-1,"V6"]) >= 0.5){
data_postcode[i,"Postcode"] <- data_postcode[i-1,"Postcode"]
} else{
#List of the remaining stations that were not similar enough to allow imputation
data_postcode[i,"Postcode"] = NA
print(paste("Original:",data_postcode[i-1,"V6"]))
print(paste("Rejected imputation:",data_postcode[i,"V6"]))
Rejected_imputation_count <- Rejected_imputation_count + 1
}
}
}
#change table order and column names to match earlier loop, for binding
data_postcode$v6 <- as.numeric(data_postcode[,"V12"])/as.numeric(data_postcode[,"V8"])
data_postcode <- data_postcode[, c(3, 2, 7, 5, 6, 8, 1)]
colnames(data_postcode) <- c("V1", "V2", "V3", "V4","V5", "V6","merger")
df_total <- rbind(df_total,data_postcode)
}
}
# Loop to make dataframe of all voting stations, their turnout and location
df_total = data.frame()
for (k in length(folderfile_l)){
data_verkiezing <- read.csv(folderfile_l[k], header=FALSE, sep=";")
areanumber <- readr::parse_number(data_verkiezing[4,3])
if (data_verkiezing[8,1] == "Postcode") {
data_verkiezing_test <- data_verkiezing %>% slice(c(6,7,8,9,14))
data_verkiezing_test <- as.data.frame(t(data_verkiezing_test)) %>% slice(-c(1:5))
data_verkiezing_test$V6 <- as.numeric(data_verkiezing_test$V5)/as.numeric(data_verkiezing_test$V4)
data_verkiezing_test$merger <- paste(areanumber,data_verkiezing_test$V2)
#Imputation in case postal code for polling station was left out
# not the best way but easy
#    for (k in 1:nrow(data_verkiezing_test)){
#      temporary_string <- merge(x = data_verkiezing_test[k,], y = pollstations[c("merger","Postcode")], by = "merger", all.x = TRUE)
#      temporary_string <- temporary_string[1,]
#      temporary_test1 <- temporary_string[,"V3"]
#      temporary_test1 <- ifelse(temporary_test1 == "", NA, temporary_test1)
#      temporary_test2 <- temporary_string[,"Postcode"]
#      temporary_test2 <- ifelse(temporary_test2 == "", NA, temporary_test2)
#      if ((is.na(temporary_test1)  == TRUE && is.na(temporary_test2) == FALSE)){
#        temporary_string[,"V3"] <- temporary_string[,"Postcode"]
#      #temporary_string[,"Postcode"] <- NULL
#      data_verkiezing_test[k,c(1:7)] <- temporary_string[,c(2:8,1)]
#      }
#    }
df_total <- rbind(df_total,data_verkiezing_test)
} else {
#The cases where there is no postal code in the .csv file at all
data_postcode_1 <- as.data.frame(t(data_verkiezing))
data_postcode_1[,5] <- as.numeric(data_postcode_1[3,4])
data_postcode_1 <- data_postcode_1[c(5:8,12)]
data_postcode_1 <- data_postcode_1 %>% slice(-c(1:5))
data_postcode_1$merger <- paste(data_postcode_1$V5, data_postcode_1$V7)
data_postcode_1 <- merge(x = data_postcode_1, y = pollstations[c("merger","Postcode")], by = "merger", all.x = TRUE)
# Section to merge zip codes to the polling station locations
# Some voting stations had different days of polling. Those were given new pollingstation numbers which are not in the locations dataset
# As a fix, we sort the dataset at names, and give the polling station with NA's the postal code from the station the row above, which should be the same
# all cases
# This only works when the name contains the date in number format, not when the name of the day is displayed. Therefore we remove those. Also to improve
# Levensteihn difference accuracy
data_postcode_1$V6<-gsub("maandag","1",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("dinsdag","2",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("woensdag","3",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("2022","",as.character(data_postcode_1$V6))
#Ordering so voting station above is likely to the identical in case of duplicates
data_postcode <- data_postcode_1[order(data_postcode_1$V6),]
# Missing value imputation based on levenstein distance
# Dit stuk moet nog naar beneden geplaatst worden voor de missende postcodes bij gemeentes waar postcodes vermeld waren
for (i in 1:nrow(data_postcode)) {
if (is.na(data_postcode[i,"Postcode"]) == TRUE){
# If levenstein similarity is over 50%, imputation . 50% is based on trial and error
if (levens_percent(data_postcode[i,"V6"],data_postcode[i-1,"V6"]) >= 0.5){
data_postcode[i,"Postcode"] <- data_postcode[i-1,"Postcode"]
} else{
#List of the remaining stations that were not similar enough to allow imputation
data_postcode[i,"Postcode"] = NA
print(paste("Original:",data_postcode[i-1,"V6"]))
print(paste("Rejected imputation:",data_postcode[i,"V6"]))
Rejected_imputation_count <- Rejected_imputation_count + 1
}
}
}
#change table order and column names to match earlier loop, for binding
data_postcode$v6 <- as.numeric(data_postcode[,"V12"])/as.numeric(data_postcode[,"V8"])
data_postcode <- data_postcode[, c(3, 2, 7, 5, 6, 8, 1)]
colnames(data_postcode) <- c("V1", "V2", "V3", "V4","V5", "V6","merger")
df_total <- rbind(df_total,data_postcode)
}
}
library(dplyr)
library(rstudioapi)
library(tidyr)
#install.packages("stringdist")
library(stringdist)
#WD to local path
setwd(dirname(getActiveDocumentContext()$path))
# Importing dataset with polling station locations
pollstations <- read.csv("data/stembureaus.csv")
# Keeping only relevant columns
pollstations <- pollstations[c("Gemeente","CBS.gemeentecode","Nummer.stembureau","Naam.stembureau","Postcode", "Plaats", "X", "Y", "Longitude", "Latitude")]
pollstations$CBS.gemeentecode <- readr::parse_number(pollstations$CBS.gemeentecode)
# Manual imputation of a municipality without numbering of poll stations based on overheid dataset
pollstations[5815:5853,3] <- c(19,22,42,43,34,39,37,11,9,8,2,3,12,32,28,33,29,31,25,41,27,30,18,40,1,15,38,24,17,21,6,35,36,13,23,20,5,7,10)
pollstations[6192:6221,3] <- c(124,63,19,68,165,114,20,13,16,72,131,128,5,6,11,17,"NA",107,169,64,1,4,26,"NA",3,52,22,32,"NA",71)
# Manual imputation of wrongly numbered stations and mismatching station numbers
pollstations[5545,3] <- 101
pollstations[5556,3] <- 18
pollstations[1722,3] <- 18
pollstations[1724,3] <- 19
pollstations[1716,3] <- 16
pollstations[4373,3] <- 21
pollstations[4367,3] <- 23
pollstations[1031:1040,3] <- c(90,10,40,30,70,20,50,100,60,82)
pollstations[2047,3] <- 156
pollstations[2064,3] <- 73
pollstations[2058,3] <- 66
pollstations[2046,3] <- 55
pollstations[2061,3] <- 69
pollstations[2062,3] <- 21
pollstations[2068,3] <- 77
pollstations[2063,3] <- 72
pollstations[2055,3] <- 63
pollstations[2071,3] <- 268
pollstations[2059,3] <- 167
pollstations[2066,3] <- 75
pollstations[2065,3] <- 74
pollstations[2051,3] <- 59
pollstations[2048,3] <- 29
pollstations[2045,3] <- 52
pollstations[2067,3] <- 126
# Make a merger variable for easier merging in a coming loop
pollstations$merger <- paste(pollstations$CBS.gemeentecode,pollstations$Nummer.stembureau)
# Levenstein distance in percentage. The percentage of the longest word to account for the size differences in the strings
levens_percent <- function (str1, str2)
{
return(1 - (stringdist(str1, str2, method="lv")/pmax(nchar(str1), nchar(str2))))
}
# Setting up variables for loop
plaatsen <- list.files(path="data/stembureaus/",pattern="")
folderfile <- ""
folderfile_l <- ""
Rejected_imputation_count <- 0
count <- 0
# Loop to obtain list of all filepaths in data folder
for (i in plaatsen){
myFiles <- list.files(path = paste("data/stembureaus/",i,"/", sep=""),pattern="*.csv")
folderfile <- paste("data/stembureaus/",i,"/",myFiles, sep="")
for (j in folderfile){
count <- count + 1
folderfile_l[[count]] <- j
}
}
# Loop to make dataframe of all voting stations, their turnout and location
df_total = data.frame()
for (k in length(folderfile_l)){
data_verkiezing <- read.csv(folderfile_l[k], header=FALSE, sep=";")
areanumber <- readr::parse_number(data_verkiezing[4,3])
if (data_verkiezing[8,1] == "Postcode") {
data_verkiezing_test <- data_verkiezing %>% slice(c(6,7,8,9,14))
data_verkiezing_test <- as.data.frame(t(data_verkiezing_test)) %>% slice(-c(1:5))
data_verkiezing_test$V6 <- as.numeric(data_verkiezing_test$V5)/as.numeric(data_verkiezing_test$V4)
data_verkiezing_test$merger <- paste(areanumber,data_verkiezing_test$V2)
#Imputation in case postal code for polling station was left out
# not the best way but easy
#    for (k in 1:nrow(data_verkiezing_test)){
#      temporary_string <- merge(x = data_verkiezing_test[k,], y = pollstations[c("merger","Postcode")], by = "merger", all.x = TRUE)
#      temporary_string <- temporary_string[1,]
#      temporary_test1 <- temporary_string[,"V3"]
#      temporary_test1 <- ifelse(temporary_test1 == "", NA, temporary_test1)
#      temporary_test2 <- temporary_string[,"Postcode"]
#      temporary_test2 <- ifelse(temporary_test2 == "", NA, temporary_test2)
#      if ((is.na(temporary_test1)  == TRUE && is.na(temporary_test2) == FALSE)){
#        temporary_string[,"V3"] <- temporary_string[,"Postcode"]
#      #temporary_string[,"Postcode"] <- NULL
#      data_verkiezing_test[k,c(1:7)] <- temporary_string[,c(2:8,1)]
#      }
#    }
df_total <- rbind(df_total,data_verkiezing_test)
} else {
#The cases where there is no postal code in the .csv file at all
data_postcode_1 <- as.data.frame(t(data_verkiezing))
data_postcode_1[,5] <- as.numeric(data_postcode_1[3,4])
data_postcode_1 <- data_postcode_1[c(5:8,12)]
data_postcode_1 <- data_postcode_1 %>% slice(-c(1:5))
data_postcode_1$merger <- paste(data_postcode_1$V5, data_postcode_1$V7)
data_postcode_1 <- merge(x = data_postcode_1, y = pollstations[c("merger","Postcode")], by = "merger", all.x = TRUE)
# Section to merge zip codes to the polling station locations
# Some voting stations had different days of polling. Those were given new pollingstation numbers which are not in the locations dataset
# As a fix, we sort the dataset at names, and give the polling station with NA's the postal code from the station the row above, which should be the same
# all cases
# This only works when the name contains the date in number format, not when the name of the day is displayed. Therefore we remove those. Also to improve
# Levensteihn difference accuracy
data_postcode_1$V6<-gsub("maandag","1",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("dinsdag","2",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("woensdag","3",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("2022","",as.character(data_postcode_1$V6))
#Ordering so voting station above is likely to the identical in case of duplicates
data_postcode <- data_postcode_1[order(data_postcode_1$V6),]
# Missing value imputation based on levenstein distance
# Dit stuk moet nog naar beneden geplaatst worden voor de missende postcodes bij gemeentes waar postcodes vermeld waren
for (i in 1:nrow(data_postcode)) {
if (is.na(data_postcode[i,"Postcode"]) == TRUE){
# If levenstein similarity is over 50%, imputation . 50% is based on trial and error
if (levens_percent(data_postcode[i,"V6"],data_postcode[i-1,"V6"]) >= 0.5){
data_postcode[i,"Postcode"] <- data_postcode[i-1,"Postcode"]
} else{
#List of the remaining stations that were not similar enough to allow imputation
data_postcode[i,"Postcode"] = NA
print(paste("Original:",data_postcode[i-1,"V6"]))
print(paste("Rejected imputation:",data_postcode[i,"V6"]))
Rejected_imputation_count <- Rejected_imputation_count + 1
}
}
}
#change table order and column names to match earlier loop, for binding
data_postcode$v6 <- as.numeric(data_postcode[,"V12"])/as.numeric(data_postcode[,"V8"])
data_postcode <- data_postcode[, c(3, 2, 7, 5, 6, 8, 1)]
colnames(data_postcode) <- c("V1", "V2", "V3", "V4","V5", "V6","merger")
df_total <- rbind(df_total,data_postcode)
}
}
# Finalizing
print(paste("Rejected Imputation Count:",Rejected_imputation_count))
colnames(df_total) <- c("Street/Name", "stationcode", "Zipcode", "Invited", "Turnout", "Turnout percentage")
write.csv(df_total,"pollingstations.csv", row.names = FALSE)
View(data_verkiezing)
folderfile_l
# Loop to make dataframe of all voting stations, their turnout and location
df_total = data.frame()
data_verkiezing_test <- data_verkiezing %>% slice(c(6,7,8,9,14))
data_verkiezing_test <- as.data.frame(t(data_verkiezing_test)) %>% slice(-c(1:5))
data_verkiezing_test$V6 <- as.numeric(data_verkiezing_test$V5)/as.numeric(data_verkiezing_test$V4)
data_verkiezing_test$merger <- paste(areanumber,data_verkiezing_test$V2)
for (k in length(folderfile_l)){
data_verkiezing <- read.csv(folderfile_l[k], header=FALSE, sep=";")
areanumber <- readr::parse_number(data_verkiezing[4,3])
if (data_verkiezing[8,1] == "Postcode") {
data_verkiezing_test <- data_verkiezing %>% slice(c(6,7,8,9,14))
data_verkiezing_test <- as.data.frame(t(data_verkiezing_test)) %>% slice(-c(1:5))
data_verkiezing_test$V6 <- as.numeric(data_verkiezing_test$V5)/as.numeric(data_verkiezing_test$V4)
data_verkiezing_test$merger <- paste(areanumber,data_verkiezing_test$V2)
#Imputation in case postal code for polling station was left out
# not the best way but easy
#    for (k in 1:nrow(data_verkiezing_test)){
#      temporary_string <- merge(x = data_verkiezing_test[k,], y = pollstations[c("merger","Postcode")], by = "merger", all.x = TRUE)
#      temporary_string <- temporary_string[1,]
#      temporary_test1 <- temporary_string[,"V3"]
#      temporary_test1 <- ifelse(temporary_test1 == "", NA, temporary_test1)
#      temporary_test2 <- temporary_string[,"Postcode"]
#      temporary_test2 <- ifelse(temporary_test2 == "", NA, temporary_test2)
#      if ((is.na(temporary_test1)  == TRUE && is.na(temporary_test2) == FALSE)){
#        temporary_string[,"V3"] <- temporary_string[,"Postcode"]
#      #temporary_string[,"Postcode"] <- NULL
#      data_verkiezing_test[k,c(1:7)] <- temporary_string[,c(2:8,1)]
#      }
#    }
df_total <- rbind(df_total,data_verkiezing_test)
} else {
#The cases where there is no postal code in the .csv file at all
data_postcode_1 <- as.data.frame(t(data_verkiezing))
data_postcode_1[,5] <- as.numeric(data_postcode_1[3,4])
data_postcode_1 <- data_postcode_1[c(5:8,12)]
data_postcode_1 <- data_postcode_1 %>% slice(-c(1:5))
data_postcode_1$merger <- paste(data_postcode_1$V5, data_postcode_1$V7)
data_postcode_1 <- merge(x = data_postcode_1, y = pollstations[c("merger","Postcode")], by = "merger", all.x = TRUE)
# Section to merge zip codes to the polling station locations
# Some voting stations had different days of polling. Those were given new pollingstation numbers which are not in the locations dataset
# As a fix, we sort the dataset at names, and give the polling station with NA's the postal code from the station the row above, which should be the same
# all cases
# This only works when the name contains the date in number format, not when the name of the day is displayed. Therefore we remove those. Also to improve
# Levensteihn difference accuracy
data_postcode_1$V6<-gsub("maandag","1",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("dinsdag","2",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("woensdag","3",as.character(data_postcode_1$V6))
data_postcode_1$V6<-gsub("2022","",as.character(data_postcode_1$V6))
#Ordering so voting station above is likely to the identical in case of duplicates
data_postcode <- data_postcode_1[order(data_postcode_1$V6),]
# Missing value imputation based on levenstein distance
# Dit stuk moet nog naar beneden geplaatst worden voor de missende postcodes bij gemeentes waar postcodes vermeld waren
for (i in 1:nrow(data_postcode)) {
if (is.na(data_postcode[i,"Postcode"]) == TRUE){
# If levenstein similarity is over 50%, imputation . 50% is based on trial and error
if (levens_percent(data_postcode[i,"V6"],data_postcode[i-1,"V6"]) >= 0.5){
data_postcode[i,"Postcode"] <- data_postcode[i-1,"Postcode"]
} else{
#List of the remaining stations that were not similar enough to allow imputation
data_postcode[i,"Postcode"] = NA
print(paste("Original:",data_postcode[i-1,"V6"]))
print(paste("Rejected imputation:",data_postcode[i,"V6"]))
Rejected_imputation_count <- Rejected_imputation_count + 1
}
}
}
#change table order and column names to match earlier loop, for binding
data_postcode$v6 <- as.numeric(data_postcode[,"V12"])/as.numeric(data_postcode[,"V8"])
data_postcode <- data_postcode[, c(3, 2, 7, 5, 6, 8, 1)]
colnames(data_postcode) <- c("V1", "V2", "V3", "V4","V5", "V6","merger")
df_total <- rbind(df_total,data_postcode)
}
}
